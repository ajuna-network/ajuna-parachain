// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_ajuna_awesome_avatars`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-0F6V7QQ`, CPU: `Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local")`, DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-node
// benchmark
// pallet
// --chain=local
// --steps=50
// --repeat=20
// --pallet=pallet_ajuna_awesome_avatars
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-AGPL
// --output=./runtime/bajun/src/weights/pallet_ajuna_awesome_avatars.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_ajuna_awesome_avatars`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ajuna_awesome_avatars::WeightInfo for WeightInfo<T> {
	/// Storage: `AwesomeAvatars::CurrentSeasonStatus` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CurrentSeasonStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:1)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerConfigs` (r:1 w:1)
	/// Proof: `AwesomeAvatars::PlayerConfigs` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `Randomness::RandomMaterial` (r:1 w:0)
	/// Proof: `Randomness::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::SeasonStats` (r:1 w:1)
	/// Proof: `AwesomeAvatars::SeasonStats` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:0 w:6)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 194]`.
	fn mint_free(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1956 + n * (32 ±0)`
		//  Estimated: `9901`
		// Minimum execution time: 138_301_000 picoseconds.
		Weight::from_parts(144_585_766, 0)
			.saturating_add(Weight::from_parts(0, 9901))
			// Standard Error: 11_352
			.saturating_add(Weight::from_parts(158_268, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(11))
	}
	/// Storage: `AwesomeAvatars::CurrentSeasonStatus` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CurrentSeasonStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:1)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::PlayerConfigs` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `Randomness::RandomMaterial` (r:1 w:0)
	/// Proof: `Randomness::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Treasury` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Treasury` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::SeasonStats` (r:1 w:1)
	/// Proof: `AwesomeAvatars::SeasonStats` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:0 w:6)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 194]`.
	fn mint_normal(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2008 + n * (32 ±0)`
		//  Estimated: `9901`
		// Minimum execution time: 177_399_000 picoseconds.
		Weight::from_parts(180_485_487, 0)
			.saturating_add(Weight::from_parts(0, 9901))
			// Standard Error: 29_035
			.saturating_add(Weight::from_parts(278_562, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(12))
	}
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:5 w:5)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:5 w:0)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::LockedAvatars` (r:5 w:0)
	/// Proof: `AwesomeAvatars::LockedAvatars` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:5 w:0)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:1)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// Storage: `Randomness::RandomMaterial` (r:1 w:0)
	/// Proof: `Randomness::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::SeasonStats` (r:1 w:1)
	/// Proof: `AwesomeAvatars::SeasonStats` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[5, 190]`.
	fn forge(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2998 + n * (38 ±0)`
		//  Estimated: `14230`
		// Minimum execution time: 139_301_000 picoseconds.
		Weight::from_parts(142_739_260, 0)
			.saturating_add(Weight::from_parts(0, 14230))
			// Standard Error: 107_497
			.saturating_add(Weight::from_parts(2_464_533, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(27))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Organizer` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Organizer` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::LockedAvatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::LockedAvatars` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Treasury` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Treasury` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:2 w:2)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_normal(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `15785`
		//  Estimated: `18812`
		// Minimum execution time: 152_808_000 picoseconds.
		Weight::from_parts(275_554_708, 0)
			.saturating_add(Weight::from_parts(0, 18812))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Organizer` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Organizer` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::LockedAvatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::LockedAvatars` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Treasury` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Treasury` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:2 w:2)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_organizer(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `15883`
		//  Estimated: `18812`
		// Minimum execution time: 154_802_000 picoseconds.
		Weight::from_parts(227_334_207, 0)
			.saturating_add(Weight::from_parts(0, 18812))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `AwesomeAvatars::CurrentSeasonStatus` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CurrentSeasonStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::SeasonStats` (r:1 w:0)
	/// Proof: `AwesomeAvatars::SeasonStats` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerConfigs` (r:2 w:2)
	/// Proof: `AwesomeAvatars::PlayerConfigs` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	fn transfer_free_mints() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1486`
		//  Estimated: `6008`
		// Minimum execution time: 35_700_000 picoseconds.
		Weight::from_parts(36_200_000, 0)
			.saturating_add(Weight::from_parts(0, 6008))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::LockedAvatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::LockedAvatars` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:0 w:1)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2492`
		//  Estimated: `5134`
		// Minimum execution time: 44_300_000 picoseconds.
		Weight::from_parts(50_801_000, 0)
			.saturating_add(Weight::from_parts(0, 5134))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	fn remove_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1197`
		//  Estimated: `3638`
		// Minimum execution time: 35_100_000 picoseconds.
		Weight::from_parts(38_301_000, 0)
			.saturating_add(Weight::from_parts(0, 3638))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::CurrentSeasonStatus` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CurrentSeasonStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Treasury` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Treasury` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:2 w:2)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:2 w:2)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 200]`.
	fn buy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2949 + n * (65 ±0)`
		//  Estimated: `18812`
		// Minimum execution time: 157_602_000 picoseconds.
		Weight::from_parts(183_211_883, 0)
			.saturating_add(Weight::from_parts(0, 18812))
			// Standard Error: 12_200
			.saturating_add(Weight::from_parts(463_585, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `AwesomeAvatars::CurrentSeasonStatus` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CurrentSeasonStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:1)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Treasury` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Treasury` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	fn upgrade_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1519`
		//  Estimated: `7528`
		// Minimum execution time: 72_301_000 picoseconds.
		Weight::from_parts(78_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7528))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `AwesomeAvatars::Organizer` (r:0 w:1)
	/// Proof: `AwesomeAvatars::Organizer` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_organizer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_700_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::Organizer` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Organizer` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::CollectionId` (r:0 w:1)
	/// Proof: `AwesomeAvatars::CollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_collection_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `1517`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_300_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::Treasurer` (r:0 w:1)
	/// Proof: `AwesomeAvatars::Treasurer` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	fn set_treasurer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_100_000 picoseconds.
		Weight::from_parts(10_400_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::Treasurer` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Treasurer` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::CurrentSeasonStatus` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CurrentSeasonStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Treasury` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Treasury` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_treasury() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1773`
		//  Estimated: `6196`
		// Minimum execution time: 87_601_000 picoseconds.
		Weight::from_parts(89_002_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AwesomeAvatars::Organizer` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Organizer` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	fn set_season() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `5134`
		// Minimum execution time: 23_201_000 picoseconds.
		Weight::from_parts(23_500_000, 0)
			.saturating_add(Weight::from_parts(0, 5134))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::Organizer` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Organizer` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:0 w:1)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	fn update_global_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `1517`
		// Minimum execution time: 14_800_000 picoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::Organizer` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Organizer` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerConfigs` (r:1 w:1)
	/// Proof: `AwesomeAvatars::PlayerConfigs` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	fn set_free_mints() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3499`
		// Minimum execution time: 16_700_000 picoseconds.
		Weight::from_parts(17_400_000, 0)
			.saturating_add(Weight::from_parts(0, 3499))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::LockedAvatars` (r:1 w:1)
	/// Proof: `AwesomeAvatars::LockedAvatars` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:2 w:2)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::CollectionId` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nft::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:7 w:7)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `NftTransfer::NftStatuses` (r:0 w:1)
	/// Proof: `NftTransfer::NftStatuses` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:1)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 200]`.
	fn lock_avatar(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1449 + n * (34 ±0)`
		//  Estimated: `20289`
		// Minimum execution time: 271_604_000 picoseconds.
		Weight::from_parts(280_462_000, 0)
			.saturating_add(Weight::from_parts(0, 20289))
			// Standard Error: 11_398
			.saturating_add(Weight::from_parts(363_577, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(21))
			.saturating_add(T::DbWeight::get().writes(18))
	}
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::LockedAvatars` (r:1 w:1)
	/// Proof: `AwesomeAvatars::LockedAvatars` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Owners` (r:2 w:2)
	/// Proof: `AwesomeAvatars::Owners` (`max_values`: None, `max_size`: Some(6436), added: 8911, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(4063), added: 6538, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::CollectionId` (r:1 w:0)
	/// Proof: `AwesomeAvatars::CollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NftTransfer::NftStatuses` (r:1 w:1)
	/// Proof: `NftTransfer::NftStatuses` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Attribute` (r:8 w:7)
	/// Proof: `Nft::Attribute` (`max_values`: None, `max_size`: Some(282), added: 2757, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Collection` (r:1 w:1)
	/// Proof: `Nft::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nft::ItemConfigOf` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Item` (r:1 w:1)
	/// Proof: `Nft::Item` (`max_values`: None, `max_size`: Some(186), added: 2661, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemMetadataOf` (r:1 w:0)
	/// Proof: `Nft::ItemMetadataOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Account` (r:0 w:1)
	/// Proof: `Nft::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nft::ItemPriceOf` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	/// Storage: `Nft::ItemAttributesApprovalsOf` (r:0 w:1)
	/// Proof: `Nft::ItemAttributesApprovalsOf` (`max_values`: None, `max_size`: Some(389), added: 2864, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nft::PendingSwapOf` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 200]`.
	fn unlock_avatar(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2334 + n * (33 ±0)`
		//  Estimated: `23046`
		// Minimum execution time: 272_699_000 picoseconds.
		Weight::from_parts(291_850_801, 0)
			.saturating_add(Weight::from_parts(0, 23046))
			// Standard Error: 9_134
			.saturating_add(Weight::from_parts(263_411, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(22))
			.saturating_add(T::DbWeight::get().writes(20))
	}
	/// Storage: `AwesomeAvatars::ServiceAccount` (r:0 w:1)
	/// Proof: `AwesomeAvatars::ServiceAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_service_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_300_000 picoseconds.
		Weight::from_parts(8_600_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Trade` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Trade` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::LockedAvatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::LockedAvatars` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::ServiceAccount` (r:1 w:0)
	/// Proof: `AwesomeAvatars::ServiceAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Seasons` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Seasons` (`max_values`: None, `max_size`: Some(1669), added: 4144, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn prepare_avatar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1863`
		//  Estimated: `6196`
		// Minimum execution time: 103_899_000 picoseconds.
		Weight::from_parts(105_200_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AwesomeAvatars::Avatars` (r:1 w:0)
	/// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(173), added: 2648, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	fn unprepare_avatar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `344`
		//  Estimated: `3638`
		// Minimum execution time: 25_700_000 picoseconds.
		Weight::from_parts(26_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3638))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AwesomeAvatars::ServiceAccount` (r:1 w:0)
	/// Proof: `AwesomeAvatars::ServiceAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::GlobalConfigs` (r:1 w:0)
	/// Proof: `AwesomeAvatars::GlobalConfigs` (`max_values`: Some(1), `max_size`: Some(15), added: 510, mode: `MaxEncodedLen`)
	/// Storage: `AwesomeAvatars::Preparation` (r:1 w:1)
	/// Proof: `AwesomeAvatars::Preparation` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	fn prepare_ipfs() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `3579`
		// Minimum execution time: 23_400_000 picoseconds.
		Weight::from_parts(24_400_000, 0)
			.saturating_add(Weight::from_parts(0, 3579))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
